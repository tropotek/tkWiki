<?php
/*      -- Generated By Auto Class Builder (c) Tropotek --
 * @author Michael Mifsud <info@tropotek.com>
 * @link http://www.tropotek.com/
 * @license Copyright 2005 Michael Mifsud
 */

/**
 * Edit:
 * Use the following markup to call this module in the template:
 *   <div var="Wik_Modules_Comment_Edit" com-class="Wik_Modules_Comment_Edit"></div>
 *
 * @package Wik
 */
class Wik_Modules_Comment_Edit extends Wik_Web_Component
{

    /**
     * @var Wik_Db_Comment
     */
    private $comment = null;


    /**
     * __construct
     *
     */
    function __construct()
    {
        parent::__construct();
        if (!$this->getWikiPage()) {
            $this->disable();
            return;
        }

        $this->comment = new Wik_Db_Comment();
        $this->comment->setPageId($this->getWikiPage()->getId());
        $this->comment->setIp(Tk_Request::remoteAddr());
    }

    /**
     * The default init method
     *
     */
    function init()
    {
        $form = Form::create('Comment', $this->comment)->setTitle('Add Comment');
        //$form->addDefaultEvents(Tk_Request::requestUri()->setFragment('commentList'));

        $form->addEvent(Form_Event_Save::create('save'))->setRedirectUrl(Tk_Request::requestUri()->setFragment('commentList'));
        $form->addEvent(Wik_Form_Event_Email::create());

        $form->addField(Form_Field_Text::create('name'))->setRequired(true);
        $form->addField(Form_Field_Text::create('email'))->setRequired(true);
        $form->addField(Form_Field_Text::create('web'))->setNotes('(optional)');
        $field = $form->addField(Form_Field_Mce::create('comment', Js_Mce::createBasic()))->setWidth(500)->setHeight(300)->setRequired(true);

        $icon = Tk_Type_Url::create('/images/code.gif')->toString();

        /* @var $mce Js_Ui_TinyMce */
        $mce = $field->getMce();

        $mce->addParam('content_css', enquote(Tk_Type_Url::create('/css/tinymce.css')->toString()));
        $mce->addButton('pretag');

        $icon = Tk_Type_Url::create('/images/code.gif')->toString();
        $mce->addParam('setup', "function(ed) {
    // Add a custom button
    ed.addButton('pretag', {
        title : 'Add the &lt;pre&gt; tag.',
        image : '$icon',
        onclick : function() {
            var txt = ed.selection.getContent({format : 'text'});
            if (txt == '') {
              txt = '&#160;';
            }

            // TODO: Place cursor at start of tag?
            ed.selection.setContent('<pre class=\"prettyprint\">' + txt + '</pre>');
            // TODO: if inside a pre tag step out and create a new p tag if a sibling
            //  one does not exist...
        }
    });

  }");




        $init = "{
  mode : '@MODE@',
  theme : 'advanced',
  skin : 'o2k7',
  editor_selector : '@CSS_SELECTOR_CLASS@',
  editor_deselector : '@CSS_DESELECTOR_CLASS@',
  plugins : '@PLUGINS@preelementfix,inlinepopups,safari,paste,template',
  theme_advanced_buttons1 : '@EXT_PLUGINS@bold,italic,underline,strikethrough,|,link,unlink,|,removeformat,cleanup,code,pretag,|,codetag',
  theme_advanced_buttons2 : '',
  theme_advanced_buttons3 : '',
  theme_advanced_buttons4 : '',
  theme_advanced_toolbar_location : 'top',
  theme_advanced_toolbar_align : 'left',
  setup : function(ed) {
    /*
    // Add a custom button
    ed.addButton('codetag', {
        title : 'Add the <code> tag.',
        image : '$icon',
        onclick : function() {
                ed.selection.setContent('<code class=\"prettyprint\">' + ed.selection.getContent({format : 'text'}) + '</code>');
        }
    });
    */
    // Add a custom button
    ed.addButton('pretag', {
        title : 'Add the <pre> tag.',
        image : '$icon',
        onclick : function() {
            var txt = ed.selection.getContent({format : 'text'});
            if (txt == '') {
              txt = '&#160;';
            }

            // TODO: Place cursor at start of tag?
            ed.selection.setContent('<pre class=\"prettyprint\">' + txt + '</pre>');
            // TODO: if inside a pre tag step out and create a new p tag if a sibling
            //  one does not exist...
        }
    });
  },
  //theme_advanced_resizing : true,
  @MCE_PARAMS@
}";
        //$mce->setInit($init);


        if (!$this->getUser()) {
            $form->addField(Form_Field_Captcha::create('validate'))->setRequired(true);
        }

        $this->setForm($form);

    }

    function doDefault()
    {
        if ($this->getUser()) {
            $this->comment->setUserId($this->getUser()->getId());
            $this->comment->setName($this->getUser()->getName());
            $this->comment->setEmail($this->getUser()->getEmail());
        }
    }


    /**
     * Render the component
     *
     * @param Dom_Template $template
     */
    function show()
    {
        $template = $this->getTemplate();
    }

}

class Wik_Form_Event_Email extends Form_Event
{

    /**
     * Create a new Event object
     *
     * @return Form_Event_Template
     */
    static function create()
    {
        $obj = new self();
        return $obj;
    }
    function init()
    {
        $this->setTrigerList(array('add', 'save', 'update'));
    }
    /**
     * NOTE: Never save an object unless you know what you are doing
     */
    function postEexecute()
    {
        if (!Tk_Config::get('wik.emailCommentsToAdmin')) {
            return;
        }
        /* @var $object Wik_Db_Comment */
        $object = $this->getForm()->getEventController()->getObject();

        if ($this->form->hasErrors()) {
            return;
        }

        $settings = Wik_Db_Settings::getInstance();
        // Email site owner of new comment
        $address = Tk_Mail_Address::create($settings->getSiteEmail(), $object->getEmail());
        $message = Tk_Mail_DomMessage::create($address);
        $message->setSubject('New Comment Posted To Wiki: ' . $settings->getTitle() . ' - ' . Tk_Request::requestUri()->getPath());
        $url = Tk_Request::requestUri()->setFragment('com_'.$object->getVolitileId());
        $html = <<<HTML
<div>
    <p>&#160;</p>
    <table>
      <tr>
        <td>Page: </td>
        <td><a href="{$url->toString()}">{$url->toString()}</a></td>
      </tr>
      <tr>
        <td>Name: </td>
        <td>{$this->getForm()->getFieldValue('name')}</td>
      </tr>
      <tr>
        <td>Email: </td>
        <td>{$this->getForm()->getFieldValue('email')}</td>
      </tr>
      <tr>
        <td>www</td>
        <td>{$this->getForm()->getFieldValue('web')}</td>
      </tr>
      <tr>
        <td>Comment</td>
        <td>{$this->getForm()->getFieldValue('comment')}</td>
      </tr>
    </table>
    <p>&#160;</p>
</div>
HTML;
        $message->setContent($html);
        $message->send();


    }
}
